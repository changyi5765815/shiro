<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<bean id="shiroService"
		class="com.atguigu.shiro.services.ShiroService"></bean>
	
	<!--  
	<bean id="shiroFilter" class="com.atguigu.shiro.test.ShiroFilter"></bean>
	-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Let's use some enterprise caching support for better performance.  
         You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--  
    	配置缓存管理器
    	1. 使用 ehcache. 所以需要导入 ehcache 的 jar 包
    	2. 需要使用 ehcache 的配置文件. 
    -->     
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>     
         
    <!--  
    	自定义的 Realm 需要继承 org.apache.shiro.realm.AuthorizingRealm 作为父类。 
    -->     
    <bean id="realm"
    	class="com.atguigu.shiro.realms.MyShiroRealm">
    	<property name="credentialsMatcher">
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<property name="hashAlgorithmName" value="MD5"></property>
    			<property name="hashIterations" value="1024"></property>
    		</bean>
    	</property>	
    </bean>     
         
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!--  
    	配置 Shiro 的 SecurityManager 实例. 
    -->     
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 配置管理缓存的 cacheManager 成员变量 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 配置访问 shiro 安全数据的 realm. 具体是登录时和权限校验时需要访问数据库资源 -->
        <property name="realm" ref="realm"/>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--  
    	配置自动调用 Spring IOC 容器中 shiro bean 的生命周期方法的 BeanPostProcessor. 
    -->        
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--  
    	在 Spring 中启用 shiro 的权限注解. 
    	前提: 必须配置 LifecycleBeanPostProcessor bean.
    -->     
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--  
    	配置 ShiroFilter
    	1. 注意: id 必须和 web.xml 文件中配置 DelegatingFilterProxy 的 <filter-name> 一致
    	2. 
    -->     
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
		
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
		
        <!-- 
        	具体配置需要拦截的资源和访问该资源需要具备的权限. 
        	1. anon: 匿名即没有登录也可以访问
        	2. authc: 认证. 即必须登录后才可以访问. 
        	3. logout: 登出. 
        	4. 注意: URL 权限采取第一次匹配优先的方式
        	5. roles: 权限过滤器. 只有具备对应的权限才可以访问资源
        	6. 如何把 filterChainDefinitions 中的信息放入到数据库中, 而不需要再配置文件中配置呢 ? 
        -->
        <!--  
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiroLogin = anon
                /logout = logout
                
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
        -->
    </bean>
    
    <bean id="filterChainDefinitionMapBuilder" class="com.atguigu.shiro.builders.FilterChainDefinitionMapBuilder"></bean>
    
    <bean id="filterChainDefinitionMap" 
    	factory-bean="filterChainDefinitionMapBuilder" 
    	factory-method="getFilterChainDefinitionMap"></bean>
    
</beans>
